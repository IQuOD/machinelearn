######################################################################################################



# big loop to find optimal values for stuff (starting with temperature increases)
def get_stats(data, consec_points):
	
	# determining the depth of actual HB flag:
	for i in range(0,len(flags.flag)):
			if (flags.flag[i] == "HB"):
				HB_depth = flags.depth[i]
			else:
 				continue
	
	try:
		# calculate peak accuracy (spike function returns int 0 if no peak found)
		temp_peak = temp_increase(data, consec_points) 
		temp_depth = temp_peak[0][0]
		difference = HB_depth - temp_depth
	
		# categorising (1=good, 0=bad)
		if (abs(difference) < 5):
			temp_stats = 1
		else:
			temp_stats = 0
	except:
		temp_stats = 0
		pass

	return(temp_stats)

# big loop to find optimal values for stuff (starting with temperature increases)
def get_stats_all(data, consec_points):
	
	# determining the depth of actual HB flag:
	for i in range(0,len(flags.flag)):
			if (flags.flag[i] == "HB"):
				HB_depth = flags.depth[i]
			else:
 				continue
	
	try:
		# calculate peak accuracy (spike function returns int 0 if no peak found)
		peaks = temp_increase(data, consec_points) 
		count = 0
	
		# categorising (1=good, 0=bad)
		for j in range(0,len(peaks)):
			difference = peaks[j][0] - HB_depth
			if (abs(difference) < 5):
				count = count + 1
	except:
		count = 0
		pass

	return(count)

# for loop to go over all data
consec_points = np.arange(10,160,10)
t_consec = []
tall_consec = []

for j in range(0,len(consec_points)):
	print(j)
	total_count = 0 
	total_all_counts = 0
	for i in range(0,len(name_array)):
		print(i)
	
		# reading in file here
		filename = name_array[i]
		read_data(filename)
		total_count = total_count + get_stats(data, consec_points[j])
		total_all_counts = total_all_counts + get_stats_all(data, consec_points[j])
		
	# store in bigger array to know which is best
	t_consec.append(total_count)
	tall_consec.append(total_all_counts)

# printing overall counts per number of consecutive points
print(t_consec)
print(tall_consec)


######################################################################################################








######################################################################################################










######################################################################################################
